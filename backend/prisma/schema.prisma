generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  firstName               String?
  lastName                String?
  email                   String                   @unique
  password                String
  role                    UserRole                 @default(MEMBER)
  address                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  eventParticipants       EventParticipant[]
  createdEvents           Event[]                  @relation("EventCreator")
  notificationPreferences NotificationPreferences?
  payments                Payment[]
  posts                   Post[]
  privacySettings         PrivacySettings?
  reactions               Reaction[]
  volunteerHours          VolunteerHours[]

  @@map("users")
}

model Payment {
  id             String    @id @default(cuid())
  customerId     String
  subscriptionId String?
  status         SubStatus @default(INACTIVE)
  amount         Decimal   @db.Decimal(10, 2)
  currency       String    @default("GDP")
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  totalDonated   Decimal   @default(0) @db.Decimal(10, 2)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model NotificationPreferences {
  id                 String   @id @default(cuid())
  emailNewsletter    Boolean  @default(true)
  eventNotifications Boolean  @default(true)
  donationReminders  Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  smsUpdates         Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model PrivacySettings {
  id            String   @id @default(cuid())
  publicProfile Boolean  @default(false)
  shareActivity Boolean  @default(false)
  allowMessages Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("privacy_settings")
}

model Post {
  id          String       @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  category    PostCategory @default(NEWS)
  status      PostStatus   @default(DRAFT)
  featured    Boolean      @default(false)
  readTime    Int?
  imageUrl    String?
  tags        String[]
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authorId    String
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@map("posts")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("reactions")
}

model Event {
  id             String             @id @default(cuid())
  title          String
  description    String
  eventType      EventType          @default(MEETING)
  status         EventStatus        @default(UPCOMING)
  location       String?
  address        String?
  latitude       Float?
  longitude      Float?
  capacity       Int?
  isVirtual      Boolean            @default(false)
  virtualLink    String?
  startDate      DateTime           @default(now())
  endDate        DateTime           @default(dbgenerated("(now() + '01:00:00'::interval)"))
  imageUrl       String?
  tags           String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  createdById    String
  participants   EventParticipant[]
  createdBy      User               @relation("EventCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("events")
}

model EventParticipant {
  id           String            @id @default(cuid())
  status       ParticipantStatus @default(REGISTERED)
  notes        String?
  registeredAt DateTime          @default(now())
  checkedInAt  DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  userId       String
  eventId      String
  event        Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_participants")
}

model VolunteerHours {
  id          String   @id @default(cuid())
  hours       Float
  description String?
  date        DateTime
  approved    Boolean  @default(false)
  approvedBy  String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  eventId     String?
  event       Event?   @relation(fields: [eventId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("volunteer_hours")
}

model PendingUser {
  id                String            @id @default(cuid())
  firstName         String
  lastName          String
  email             String            @unique
  phone             String?
  constituency      String?
  interests         String[]
  volunteer         Boolean           @default(false)
  newsletter        Boolean           @default(true)
  status            PendingUserStatus @default(UNREVIEWED)
  accessCode        String?
  reviewedBy        String?
  reviewNotes       String?
  approvedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  briefBio          String?
  briefCV           String?
  canContribute     String[]
  gdprConsent       Boolean           @default(false)
  interestedIn      String[]
  isBritishCitizen  Boolean?
  livesInUK         Boolean?
  otherAffiliations String?
  signedNDA         Boolean           @default(false)
  socialMediaHandle String?

  @@map("pending_users")
}

model AccessCode {
  id        String    @id @default(cuid())
  code      String    @unique
  email     String
  used      Boolean   @default(false)
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime  @default(now())

  @@map("access_codes")
}

enum UserRole {
  ADMIN
  MEMBER
  VOLUNTEER
  WRITER
}

enum SubStatus {
  ACTIVE
  INACTIVE
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostCategory {
  NEWS
  POLICY
  CAMPAIGNS
  EVENTS
  VICTORIES
  PRESS
}

enum EventType {
  RALLY
  MEETING
  FUNDRAISER
  CAMPAIGN
  VOLUNTEER
  TRAINING
  CONFERENCE
  SOCIAL
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum ParticipantStatus {
  REGISTERED
  CONFIRMED
  ATTENDED
  NO_SHOW
  CANCELLED
}

enum PendingUserStatus {
  UNREVIEWED
  CONTACTED
  APPROVED
  REJECTED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  WRITER
  MEMBER
  VOLUNTEER
}

enum SubStatus {
  ACTIVE
  INACTIVE
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostCategory {
  NEWS
  POLICY
  CAMPAIGNS
  EVENTS
  VICTORIES
  PRESS
}

model User {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  email     String   @unique
  password  String
  role      UserRole @default(MEMBER)
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  payments               Payment[]
  notificationPreferences NotificationPreferences?
  privacySettings        PrivacySettings?
  posts                  Post[]
  reactions              Reaction[]
  
  @@map("users")
}

model Payment {
  id             String        @id @default(cuid())
  customerId     String        // Stripe customer ID or other payment provider ID
  subscriptionId String?       // Subscription ID from payment providere
  status         SubStatus     @default(INACTIVE)
  amount         Decimal       @db.Decimal(10, 2)
  currency       String        @default("USD")
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Foreign key to User
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model NotificationPreferences {
  id                 String   @id @default(cuid())
  emailNewsletter    Boolean  @default(true)   // Receive our weekly newsletter with party updates and news
  eventNotifications Boolean  @default(true)   // Get notified about upcoming events and rallies in your area
  donationReminders  Boolean  @default(true)   // Occasional reminders about supporting our campaigns
  pushNotifications  Boolean  @default(true)   // Receive urgent updates and breaking news notifications
  smsUpdates         Boolean  @default(false)  // Get text messages for time-sensitive campaign updates
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Foreign key to User
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}

model PrivacySettings {
  id             String   @id @default(cuid())
  publicProfile  Boolean  @default(false)  // Allow other members to see your profile and activity
  shareActivity  Boolean  @default(false)  // Show your donations and volunteer hours to other members
  allowMessages  Boolean  @default(true)   // Let other members send you direct messages
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Foreign key to User
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("privacy_settings")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  excerpt     String?     // Short summary for preview
  category    PostCategory @default(NEWS)
  status      PostStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  readTime    Int?        // Estimated read time in minutes
  imageUrl    String?     // Optional featured image
  tags        String[]    // Array of tags for better organization
  publishedAt DateTime?   // When the post was published
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Foreign key to User (author)
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Relationships
  reactions   Reaction[]
  
  @@map("posts")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String   // The emoji used for reaction (üëç, ‚ù§Ô∏è, üéâ, etc.)
  createdAt DateTime @default(now())
  
  // Foreign keys
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Ensure one reaction per user per post
  @@unique([userId, postId])
  @@map("reactions")
}
